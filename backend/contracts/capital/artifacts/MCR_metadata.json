{
	"compiler": {
		"version": "0.8.21+commit.d9974bed"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "masterAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "mcr",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "desiredMCR",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "mcrFloor",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "mcrETHWithGear",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalSumAssured",
						"type": "uint256"
					}
				],
				"name": "MCRUpdated",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "desiredMCR",
				"outputs": [
					{
						"internalType": "uint112",
						"name": "",
						"type": "uint112"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "gearingFactor",
				"outputs": [
					{
						"internalType": "uint24",
						"name": "",
						"type": "uint24"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllSumAssurance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMCR",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "mcr",
				"outputs": [
					{
						"internalType": "uint112",
						"name": "",
						"type": "uint112"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "mcrFloor",
				"outputs": [
					{
						"internalType": "uint112",
						"name": "",
						"type": "uint112"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "updateMCRInternal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"getMCR()": {
					"details": "Calculates the current virtual MCR value. The virtual MCR value moves towards the desiredMCR value away from the stored mcr value at constant velocity based on how much time passed from the lastUpdateTime. The total change in virtual MCR cannot exceed 1% of stored mcr. This approach allows for the MCR to change smoothly across time without sudden jumps between values, while always progressing towards the desiredMCR goal. The desiredMCR can change subject to the call of _updateMCR so the virtual MCR value may change direction and start decreasing instead of increasing or vice-versa.",
					"returns": {
						"_0": "mcr"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/capital/MCR.sol": "MCR"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Master.sol": {
			"keccak256": "0x3d3184b9516122e6fb70e4b5d512b6a0219abe38c4792b9cbf382dbffb880c65",
			"urls": [
				"bzz-raw://e1bb612708fc4fd742569a13ff47a2b359e21044f201e7eb99316a25c648203a",
				"dweb:/ipfs/QmZZwWpCLopjSVdjPNR1LxxrBXp7wFEgmqzYuQUQFh1z6J"
			]
		},
		"contracts/capital/MCR.sol": {
			"keccak256": "0x1731dd090d2dc559f365ca313f241e048eea2a78beaddf13e7c1ee5f707e41e2",
			"urls": [
				"bzz-raw://bd635ae6b3c294813edbf2211b4d78c1d1d01e944633d5ad8e470936dae58829",
				"dweb:/ipfs/Qmakf3Xwvwp7a6PEvdsF9PtNZYs34x4XtAakKfp9UNstyP"
			]
		},
		"contracts/interfaces/ICover.sol": {
			"keccak256": "0xabf8996a1f9ab2326c42ae297e55009904f4d8a19b0976865885ad4e8c6a529f",
			"urls": [
				"bzz-raw://66b1cd261e3b8709b05c4aea929e48a94401b3149ef61f16049a4c30f639edb3",
				"dweb:/ipfs/QmZASEHARjc3UXZNxUihqoZXtTCv1kPr9dzDjpsYvYMnBb"
			]
		},
		"contracts/interfaces/ICoverNFT.sol": {
			"keccak256": "0x79d602e1cd332d73b59651d0af301a23071e4ca225097b24d80f9947393e2582",
			"urls": [
				"bzz-raw://a8b78909a6db032e68906729c03fb6e3b8183264fc34fe4009c4c0a598a00a7a",
				"dweb:/ipfs/QmaGEKqDiifEftwiPbBEnaduhZzUwzEBbj89xEdzkx1iB7"
			]
		},
		"contracts/interfaces/IMCR.sol": {
			"keccak256": "0xba1dfdc615074fe4d67cc249ae373f3d83ebf1f184b199c96c29537ee769ac61",
			"urls": [
				"bzz-raw://a6dd0f3bb2cc1167a49a36d1c1c10903c7896dec9bef820fe106104f437e0761",
				"dweb:/ipfs/QmP4e8YdnBphnBhWFFC96qjvLaQFr5R3rLSXcydyX6gkpy"
			]
		},
		"contracts/libraries/Math.sol": {
			"keccak256": "0x57f526a92c1f4d0de03da446b736d2e7688929e49353628cc7e23e93d81b49c9",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://172b2b8cf28838b698acb7e9927ece6898c62b9627470504051dbae0ce5945ce",
				"dweb:/ipfs/QmZLHfcgt3fQz85h183rH96vkkAg9mDPXKfWV4ECCefn43"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x461586fb5e1bae7c8f20946eaac8063ba69175f52ce877d82a87fb797be459ae",
			"license": "MIT",
			"urls": [
				"bzz-raw://15eac2a3d51e4084e4a30fed436652cc2e668c4c6ecc24e2cf11046d076e5ff9",
				"dweb:/ipfs/Qmf659uCMzNkfxiCfopZVRe917j6DwanPXz3Q2JXLmgfUs"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x39194d726021816f8a5f2b821574349a4884833cf841378dc8e6862e5f789ed6",
			"license": "MIT",
			"urls": [
				"bzz-raw://08cfffa942e4589c4d927db3fecfea998e9486ff41f48ee905fdda34d152a846",
				"dweb:/ipfs/QmQKwHL48iBd5XzRAnSNnGBXo6Ykt22iADEReEusX1SQvK"
			]
		}
	},
	"version": 1
}